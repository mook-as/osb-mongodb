heat_template_version: 2016-04-08
description: Deployment Description for MongoDB-Replicaset Primary-Node (Script 4/5)

parameters:

  image_id:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  availability_zone:
    type: string
    description: Availability Zone of the nodes.
  server_group:
    type: string
    description: server group of the nodes.

  hostname:
    type: string
    description: Hostname of the primary node.
  primary_volume_id:
    type: string
    description: ID of the pre-created volume to be attached to the primary node.
  primary_port:
    type: string
    description: Port-ID of the pre-created Port for the primary node.
  primary_ip:
    type: string
    description: IP of primary node.
  secondaries_ip_list:
    type: comma_delimited_list
    description: Network-IP comma seperate list from secondary mongodb-server.

  service_db:
    type: string
    description: Name of the Database.
  admin_user:
    type: string
    description: Admin user for the service.
  sb_user:
    type: string
    description: SB-User for the service.
  admin_password:
    type: string
    hidden: true
    description: Password for the service_user password.
  mongodb_key:
    type: string
    description: Shared key for cluster authentication on all nodes of the replicaset.
  repset_name:
    type: string
    description: Name of the replicaset.


resources:

  volume_attachment_prim:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: primary_volume_id }
      instance_uuid: { get_resource: service_prim }
      mountpoint: /dev/vdb

  service_prim:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      key_name: { get_param: key_name }
      scheduler_hints:
        group: {get_param: server_group}
      name:
       str_replace:
         template: $hostname-m0
         params:
           $hostname: { get_param: hostname }
      networks:
      - port: { get_param: primary_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            mkdir -p /data
            echo "/dev/vdb       /data       ext4    defaults     0 0" >> /etc/fstab
            mkfs.ext4 /dev/vdb
            mount -a

            export REPOSITORY_MONGO="https://bitbucket.org/meshstack/deployment-scripts-mongodb/raw/HEAD/mongodb"
            export REPOSITORY_MONGO_HA="https://bitbucket.org/meshstack/deployment-scripts-mongodb/raw/HEAD/mongodb/cluster"
            export REPOSITORY_MONIT="https://bitbucket.org/meshstack/deployment-scripts-monit/raw/HEAD/monit"

            wget $REPOSITORY_MONGO/mongo-template.sh --no-cache

            chmod +x mongo-template.sh

            ./mongo-template.sh -d $service_db -u $admin_user -v $sb_user -p $admin_password -e openstack

            ips="$secondaries_ip_list"
            ips=${ips:1:-1}
            

            if [[ -n "${ips// }" ]]; then
            wget $REPOSITORY_MONGO_HA/mongo-HA-repset-template.sh --no-cache
            chmod +x mongo-HA-repset-template.sh
            ./mongo-HA-repset-template.sh -d $service_db -u $admin_user -p $admin_password -r $repset_name -k "$mongodb_key" -m $primary_ip -s "$ips" -a primary
            
            fi
            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            $service_db: {get_param: service_db}
            $admin_user: {get_param: admin_user}
            $sb_user: {get_param: sb_user}
            $admin_password: {get_param: admin_password}
            $mongodb_key: { get_param: mongodb_key}
            $repset_name: { get_param: repset_name}
            $primary_ip: { get_param: primary_ip}
            $secondaries_ip_list: { get_param: secondaries_ip_list}

            wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
  wait_for_it:
    type: OS::Heat::None
    depends_on: wait_condition
